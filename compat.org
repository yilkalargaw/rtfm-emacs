#+TITLE: compat.el
#+AUTHOR: Yilkal Argaw , StackOverflow, Github, Emacs-wiki and The Internet in General
#+HTML_HEAD: <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/water.css@2/out/water.css">
# #+HTML_HEAD: <link rel="stylesheet" href="https://classless.de/classless.css">
# #+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://a-dma.github.io/gruvbox-css/gruvbox-dark-medium.min.
# #+HTML_HEAD: <link rel="stylesheet" href="https://cdn.simplecss.org/simple.min.css">
# #+HTML_HEAD: <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sakura.css/css/sakura.css" type="text/css">
# #+HTML_HEAD: <link rel="stylesheet" href="https://unpkg.com/mvp.css"> 
# #+HTML_HEAD: <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/holiday.css@0.11.2" />
# #+HTML_HEAD: <link rel="stylesheet" href="https://cdn.jsDeliver.net/npm/@exampledev/new.css/new.min.css" />
# #+HTML_HEAD: <link rel="stylesheet" href="https://unpkg.com/missing.css/dist/missing.min.css" />
# #+HTML_HEAD: <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.min.css" />
# #+HTML_HEAD: <link rel="stylesheet" href="https://cdn.jsDeliver.net/gh/yegor256/tacit@gh-pages/tacit-css.min.css" />
# #+HTML_HEAD: <link rel="stylesheet" href="https://unpkg.com/boltcss/bolt.min.css" />
# #+HTML_HEAD: <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/alvaromontoro/almond.css@latest/dist/almond.min.css" />
# #+HTML_HEAD: <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/alvaromontoro/almond.css@latest/dist/almond.lite.min.css" />
# #+HTML_HEAD: <link rel="stylesheet" href="https://unpkg.com/neobrutalismcss@latest" />
# #+HTML_HEAD: <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/eobrain/classless-tufte-css@v1.0.1/tufte.min.css"/>
# #+HTML_HEAD: <link rel="stylesheet" href="https://unpkg.com/latex.css/style.min.css" />
# #+HTML_HEAD: <script src="https://cdn.jsdelivr.net/npm/prismjs/prism.min.js"></scrip

#+INFOJS_OPT: view:overview toc:3 ltoc:3 mouse:underline buttons:0 path:https://orgmode.org/worg/code/org-info-js/org-info-src.js
#+OPTIONS: ^:nil
#+OPTIONS: _:nil
#+EXCLUDE_TAGS: noexport
#+PROPERTY: header-args :tangle (expand-file-name "compiled/compat.el" user-emacs-directory)

* compat

** compat functionss and macros

 These are compatibility functions and macros for my configuration to work with older versions of emacs.
 they include seq-do , seq-map seq-concatenate, setopt, string-trim, string-empty-p, if-let, when-let, pcase-lambda
    #+begin_src emacs-lisp

    (unless (fboundp 'seq-do)
      (defun seq-do (function sequence)
        "Apply FUNCTION to each element of SEQUENCE for side effects.
        FUNCTION must be a one-argument function, and SEQUENCE may be
        a list, vector, or string."
        (cond
         ((listp sequence)
          (mapc function sequence))
         ((vectorp sequence)
          (mapc function (append sequence nil)))
         ((stringp sequence)
          (mapc function (string-to-list sequence)))
         (t
          (error "Unsupported sequence type: %s" (type-of sequence))))))

    (unless (fboundp 'seq-map)
      (defun seq-map (function sequence)
        "Apply FUNCTION to each element of SEQUENCE and return a sequence
         of the same type. SEQUENCE may be a list, vector, or string."
        (cond
         ((listp sequence)
          (mapcar function sequence))
         ((vectorp sequence)
          (apply 'vector (mapcar function (append sequence nil))))
         ((stringp sequence)
          (concat (mapcar function (string-to-list sequence))))
         (t
          (error "Unsupported sequence type: %s" (type-of sequence))))))

    (unless (fboundp 'seq-concatenate)
      (defun seq-concatenate (type &rest sequences)
        "Concatenate SEQUENCES into a single sequence of TYPE.
        TYPE can be \\'list, \\'vector, or \\'string."
        (cond
         ((eq type 'list)
          (apply #'append sequences))
         ((eq type 'vector)
          (apply #'vconcat sequences))
         ((eq type 'string)
          (mapconcat #'identity sequences ""))
         (t
          (error "Unsupported type: %s" type)))))

    (unless (fboundp 'setopt)
      (defmacro setopt (&rest args)
        "Set user options using `customize-set-variable' (for Emacs < 29 compatibility).
            Accepts VAR VAL pairs, like `setq'."
        (let ((forms '()))
          (while args
            (let ((var (pop args))
                  (val (pop args)))
              (push `(customize-set-variable ',var ,val) forms)))
          `(progn ,@(nreverse forms)))))

    (unless (require 'subr-x nil 'noerror)
      ;; Define string-trim if missing
      (unless (fboundp 'string-trim)
        (defun string-trim (string)
          "Remove leading and trailing whitespace from STRING."
          (replace-regexp-in-string
           "\\`[ \t\n\r]+" ""
           (replace-regexp-in-string "[ \t\n\r]+\\'" "" string))))

      ;; Define string-empty-p if missing
      (unless (fboundp 'string-empty-p)
        (defun string-empty-p (string)
          "Return non-nil if STRING is empty or nil."
          (or (null string) (string= string ""))))

      ;; Define if-let as macro
      (unless (fboundp 'if-let)
        (defmacro if-let (binding then &optional else)
          "Emacs 24-compatible version of `if-let'. BINDING should be (VAR VAL)."
          (let ((var (car binding))
                (val (cadr binding)))
            `(let ((,var ,val))
               (if ,var ,then ,else)))))

      ;; when-let for convenience
      (unless (fboundp 'when-let)
        (defmacro when-let (binding &rest body)
          "Emacs 24-compatible version of `when-let'. BINDING should be (VAR VAL)."
          (let ((var (car binding))
                (val (cadr binding)))
            `(let ((,var ,val))
               (when ,var ,@body))))))

    ;; pcase-lambda (from pcase.el)
    (unless (fboundp 'pcase-lambda)
      (defmacro pcase-lambda (args &rest body)
        `(lambda (&rest args)
           (pcase args
             ((list ,@args) ,@body)))))

    #+end_src
    
** define global-text-scaling for older versions
#+begin_src emacs-lisp

(defcustom global-text-scale-adjust-resizes-frames nil
  "Whether `global-text-scale-adjust' resizes the frames."
  :type '(choice (const :tag "Off" nil)
                 (const :tag "On" t))
  :group 'display
  :version "29.1")

(defcustom global-text-scale-adjust-limits '(10 . 500)
  "Min/max values for `global-text-scale-adjust'.
This is a cons cell where the `car' has the minimum font size and
the `cdr' has the maximum font size, in units of 1/10 pt."
  :version "29.1"
  :group 'display
  :type '(cons (integer :tag "Min")
               (integer :tag "Max")))

;; (defvar global-text-scale-adjust--default-height nil)

;; (defvar global-text-scale-adjust--increment-factor 5)

;; Most of what follows is stolen from emcs 29 because my functions to do global scaling
;; depend on how I define fonts. This is the more flexable way to do it
;; any modification to this code that deals with global-text-scaling will therefore
;; follow the license that emacs enforces so read the emacs license
(when (not EMACS29+)
  (progn
    (require 'face-remap)

    (defcustom global-text-scale-adjust-resizes-frames nil
      "Whether `global-text-scale-adjust' resizes the frames."
      :type '(choice (const :tag "Off" nil)
                     (const :tag "On" t))
      :group 'display
      :version "29.1")

    (defcustom global-text-scale-adjust-limits '(10 . 500)
      "Min/max values for `global-text-scale-adjust'.
This is a cons cell where the `car' has the minimum font size and
the `cdr' has the maximum font size, in units of 1/10 pt."
      :version "29.1"
      :group 'display
      :type '(cons (integer :tag "Min")
                   (integer :tag "Max")))

    (defvar global-text-scale-adjust--default-height nil)

    (defvar global-text-scale-adjust--increment-factor 5)


    (defun global-text-scale-adjust (increment)
      "Change (a.k.a. \"adjust\") the font size of all faces by INCREMENT.

Interactively, INCREMENT is the prefix numeric argument, and defaults
to 1.  Positive values of INCREMENT increase the font size, negative
values decrease it.

When you invoke this command, it performs the initial change of the
font size, and after that allows further changes by typing one of the
following keys immediately after invoking the command:

   \\`+', \\`='   Globally increase the height of the default face
   \\`-'      Globally decrease the height of the default face
   \\`0'      Globally reset the height of the default face

(The change of the font size produced by these keys depends on the
final component of the key sequence, with all modifiers removed.)

Buffer-local face adjustments have higher priority than global
face adjustments.

The variable `global-text-scale-adjust-resizes-frames' controls
whether the frames are resized to keep the same number of lines
and characters per line when the font size is adjusted.

See also the related command `text-scale-adjust'.  Unlike that
command, which scales the font size with a factor,
`global-text-scale-adjust' scales the font size with an
increment."
      (interactive "p")
      (when (display-graphic-p)
        (unless global-text-scale-adjust--default-height
          (setq global-text-scale-adjust--default-height
                (face-attribute 'default :height)))
        (let* ((key (event-basic-type last-command-event))
               (echo-keystrokes nil)
               (cur (face-attribute 'default :height))
               (inc
                (pcase key
                  (?- (* (- increment)
                         global-text-scale-adjust--increment-factor))
                  (?0 (- global-text-scale-adjust--default-height cur))
                  (_ (* increment
                        global-text-scale-adjust--increment-factor))))
               (new (+ cur inc)))
          (when (< (car global-text-scale-adjust-limits)
                   new
                   (cdr global-text-scale-adjust-limits))
            (let ((frame-inhibit-implied-resize
                   (not global-text-scale-adjust-resizes-frames)))
              (set-face-attribute 'default nil :height new)
              (redisplay 'force)
              (when (and (not (and (characterp key) (= key ?0)))
                         (= cur (face-attribute 'default :height)))
                (setq global-text-scale-adjust--increment-factor
                      (1+ global-text-scale-adjust--increment-factor))
                (global-text-scale-adjust increment))))
          (when (characterp key)
            (set-transient-map
             (let ((map (make-sparse-keymap)))
               (dolist (mod '(() (control meta)))
                 (dolist (key '(?+ ?= ?- ?0))
                   (define-key map (vector (append mod (list key)))
                     'global-text-scale-adjust)))
               map)
             nil
             (message "Use +, - or 0 for further adjustment"))))))

    (define-key ctl-x-map [(control meta ?+)] 'global-text-scale-adjust)
    (define-key ctl-x-map [(control meta ?=)] 'global-text-scale-adjust)
    (define-key ctl-x-map [(control meta ?-)] 'global-text-scale-adjust)
    (define-key ctl-x-map [(control meta ?0)] 'global-text-scale-adjust)


  ;;    (defvar my-default-font-height (face-attribute 'default :height))
  ;;    (defun my-set-to-default-font-height ()
  ;;      (interactive)
  ;;      ;; (set-face-attribute 'default nil :height my-default-font-height)
  ;;      (set-face-font 'default my-default-font)
  ;;      (message (number-to-string (face-attribute 'default :height))))


  ;;    (defun my-increase-default-font-height ()
  ;;      (interactive)
  ;;      (let* ((default-face-height (face-attribute 'default :height)))
  ;;        (set-face-attribute 'default nil :height (+ default-face-height 5))
  ;;        (message (number-to-string (face-attribute 'default :height)))
  ;;        ))


  ;;    (defun my-decrease-default-font-height ()
  ;;      (interactive)
  ;;      (let* ((default-face-height (face-attribute 'default :height)))
  ;;        (set-face-attribute 'default nil :height (- default-face-height 5))
  ;;        (message (number-to-string (face-attribute 'default :height)))
  ;;        ))

  ;;    (global-set-key (kbd "C-M-=") 'my-increase-default-font-height)
  ;;    (global-set-key (kbd "C-M--") 'my-decrease-default-font-height)
  ;;    (global-set-key (kbd "C-M-0") 'my-set-to-default-font-height)


;; (defadvice text-scale-increase (around all-buffers (arg) activate)
;;   (dolist (buffer (buffer-list))
;;     (with-current-buffer buffer
;;       ad-do-it)))

;; (defadvice text-scale-decrease (around all-buffers (arg) activate)
;;   (dolist (buffer (buffer-list))
;;     (with-current-buffer buffer
;;       ad-do-it)))

 ))

#+end_src


* ending
#+begin_src emacs-lisp
;;; compat.el ends here
#+end_src

