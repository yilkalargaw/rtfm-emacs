#+TITLE: rtfm.el
#+AUTHOR: Yilkal Argaw , StackOverflow, Github, Emacs-wiki and The Internet in General
#+HTML_HEAD: <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/water.css@2/out/water.css">
# #+HTML_HEAD: <link rel="stylesheet" href="https://classless.de/classless.css">
# #+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://a-dma.github.io/gruvbox-css/gruvbox-dark-medium.min.
# #+HTML_HEAD: <link rel="stylesheet" href="https://cdn.simplecss.org/simple.min.css">
# #+HTML_HEAD: <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sakura.css/css/sakura.css" type="text/css">
# #+HTML_HEAD: <link rel="stylesheet" href="https://unpkg.com/mvp.css"> 
# #+HTML_HEAD: <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/holiday.css@0.11.2" />
# #+HTML_HEAD: <link rel="stylesheet" href="https://cdn.jsDeliver.net/npm/@exampledev/new.css/new.min.css" />
# #+HTML_HEAD: <link rel="stylesheet" href="https://unpkg.com/missing.css/dist/missing.min.css" />
# #+HTML_HEAD: <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.min.css" />
# #+HTML_HEAD: <link rel="stylesheet" href="https://cdn.jsDeliver.net/gh/yegor256/tacit@gh-pages/tacit-css.min.css" />
# #+HTML_HEAD: <link rel="stylesheet" href="https://unpkg.com/boltcss/bolt.min.css" />
# #+HTML_HEAD: <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/alvaromontoro/almond.css@latest/dist/almond.min.css" />
# #+HTML_HEAD: <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/alvaromontoro/almond.css@latest/dist/almond.lite.min.css" />
# #+HTML_HEAD: <link rel="stylesheet" href="https://unpkg.com/neobrutalismcss@latest" />
# #+HTML_HEAD: <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/eobrain/classless-tufte-css@v1.0.1/tufte.min.css"/>
# #+HTML_HEAD: <link rel="stylesheet" href="https://unpkg.com/latex.css/style.min.css" />
# #+HTML_HEAD: <script src="https://cdn.jsdelivr.net/npm/prismjs/prism.min.js"></scrip

#+INFOJS_OPT: view:overview toc:3 ltoc:3 mouse:underline buttons:0 path:https://orgmode.org/worg/code/org-info-js/org-info-src.js
#+OPTIONS: ^:nil
#+OPTIONS: _:nil
#+EXCLUDE_TAGS: noexport
#+PROPERTY: header-args :tangle (expand-file-name "compiled/rtfm.el" user-emacs-directory)

* beginning commentary
#+begin_src emacs-lisp
;;; early-init.el --- Early initialization. -*- lexical-binding: t -*-

;;; Commentary:
;;
;; Emacs HEAD (27+) introduces early-init.el, which is run before init.el,
;; before package and UI initialization happens.
;;

;;; Code:

#+end_src

* vanilla emacs settings
  
** mostly related to initialization process

*** earlyinits

 This snippet ensures that users running versions of Emacs prior to
 27.0 can utilize custom configurations defined in early-init.el,
 thereby enhancing their Emacs experience without disrupting
 compatibility with newer versions.

#+begin_src emacs-lisp

(when (version< emacs-version "27.0")
  (let ((dafile
         (expand-file-name "early-init.el" user-emacs-directory)))
    (when (file-exists-p dafile)
      (load-file dafile))))

#+end_src

*** other init settings for speed

Inhibit the default setting and kill scratch buffer to speedup
initialization time and I don't like having an elisp interaction mode
as the default scratch buffer.

#+begin_src emacs-lisp

(customize-set-variable 'inhibit-default-init t)
;; (setq initial-major-mode 'fundamental-mode)
(kill-buffer "*scratch*")

#+end_src

*** suppress some ad-handle-definition warnings

Accept ad-redefinitions during advice redefintions. I want it to
accept it to avoid warnings related to them. Original value was
‘warn’.

#+begin_src emacs-lisp

(customize-set-variable 'ad-redefinition-action 'accept)

#+end_src

*** more garbage collection related settings

Define functions to change gc-cons-threshold to the maximum fixnum so
that garbage collection could be defered. This part delays garbage
collection during minibuffer completions to until when you exit the
minibuffer.

#+begin_src emacs-lisp

(defvar yae-gc-cons-threshold (* 32 1024 1024))

(defun yae-defer-garbage-collection-h ()
  (setq gc-cons-threshold most-positive-fixnum))

(defun yae-restore-garbage-collection-h ()
  ;; Defer it so that commands launched immediately after will enjoy the
  ;; benefits.
  (run-at-time
   1 nil (lambda () (setq gc-cons-threshold (* 32 1024 1024)))))

(add-hook 'minibuffer-setup-hook #'yae-defer-garbage-collection-h)
(add-hook 'minibuffer-exit-hook #'yae-restore-garbage-collection-h)

#+end_src

* load-theme

#+begin_src emacs-lisp

(defconst theme-directory (expand-file-name "themes" user-emacs-directory))

(unless (file-directory-p theme-directory)
  (make-directory theme-directory))

(add-to-list 'custom-theme-load-path
             (expand-file-name "themes" user-emacs-directory))


(let ((basedir theme-directory))
  (dolist (f (directory-files basedir))
    (if (and (not (or (equal f ".") (equal f "..")))
             (file-directory-p (concat basedir f)))
        (add-to-list 'custom-theme-load-path (concat basedir f)))))


;; (add-hook 'after-init-time-hook
;;           (if (require 'base16-theme nil 'noerror)
;;               (load-theme 'base16-brewer t)
;; 			  ;; (load-theme 'base16-black-metal-immortal t)
;;             (load-theme 'yae_simple t)
;;             ;; (load-theme 'wombat t)
;;             ;; (load-theme 'manoj-dark t)
;;             ;; (load-theme 'modus-vivendi t)
;;             ))

(add-hook 'after-init-time-hook
          (progn
            (load-theme 'rtfm-noone-dark t)))

;; (add-hook 'after-init-hook (lambda () (load-theme 'xresources t)))
;; (add-hook 'emacs-startup-hook (lambda () (load-theme 'xresources t)))

#+end_src

  
* COMMENT initial scratch-buffer settings

#+begin_src emacs-lisp

(add-hook 'after-init-time-hook (progn
                 (switch-to-buffer "*scratch*")
                 (lisp-interaction-mode)))

#+end_src

  
* load custom faces

#+begin_src emacs-lisp

(add-hook 'after-init-hook
          (lambda ()
            (let ((dafile (expand-file-name "custom_faces.el" user-emacs-directory)))
              (when (file-exists-p dafile) (load-file dafile)))))

(when EMACS27+
  (add-hook 'server-after-make-frame-hook
            (lambda ()
              (let ((dafile (expand-file-name "custom_faces.el" user-emacs-directory)))
                (when (file-exists-p dafile) (load-file dafile))))))

#+end_src

  

* ending
#+begin_src emacs-lisp
;;; rtfm.el ends here
#+end_src

