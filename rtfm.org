#+TITLE: rtfm.el
#+AUTHOR: Yilkal Argaw , StackOverflow, Github, Emacs-wiki and The Internet in General
#+HTML_HEAD: <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/water.css@2/out/water.css">
# #+HTML_HEAD: <link rel="stylesheet" href="https://classless.de/classless.css">
# #+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://a-dma.github.io/gruvbox-css/gruvbox-dark-medium.min.
# #+HTML_HEAD: <link rel="stylesheet" href="https://cdn.simplecss.org/simple.min.css">
# #+HTML_HEAD: <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sakura.css/css/sakura.css" type="text/css">
# #+HTML_HEAD: <link rel="stylesheet" href="https://unpkg.com/mvp.css"> 
# #+HTML_HEAD: <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/holiday.css@0.11.2" />
# #+HTML_HEAD: <link rel="stylesheet" href="https://cdn.jsDeliver.net/npm/@exampledev/new.css/new.min.css" />
# #+HTML_HEAD: <link rel="stylesheet" href="https://unpkg.com/missing.css/dist/missing.min.css" />
# #+HTML_HEAD: <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.min.css" />
# #+HTML_HEAD: <link rel="stylesheet" href="https://cdn.jsDeliver.net/gh/yegor256/tacit@gh-pages/tacit-css.min.css" />
# #+HTML_HEAD: <link rel="stylesheet" href="https://unpkg.com/boltcss/bolt.min.css" />
# #+HTML_HEAD: <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/alvaromontoro/almond.css@latest/dist/almond.min.css" />
# #+HTML_HEAD: <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/alvaromontoro/almond.css@latest/dist/almond.lite.min.css" />
# #+HTML_HEAD: <link rel="stylesheet" href="https://unpkg.com/neobrutalismcss@latest" />
# #+HTML_HEAD: <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/eobrain/classless-tufte-css@v1.0.1/tufte.min.css"/>
# #+HTML_HEAD: <link rel="stylesheet" href="https://unpkg.com/latex.css/style.min.css" />
# #+HTML_HEAD: <script src="https://cdn.jsdelivr.net/npm/prismjs/prism.min.js"></scrip

#+INFOJS_OPT: view:overview toc:3 ltoc:3 mouse:underline buttons:0 path:https://orgmode.org/worg/code/org-info-js/org-info-src.js
#+OPTIONS: ^:nil
#+OPTIONS: _:nil
#+EXCLUDE_TAGS: noexport
#+PROPERTY: header-args :tangle (expand-file-name "compiled/rtfm.el" user-emacs-directory)

* beginning commentary
#+begin_src emacs-lisp
;;; early-init.el --- Early initialization. -*- lexical-binding: t -*-

;;; Commentary:
;;
;; Emacs HEAD (27+) introduces early-init.el, which is run before init.el,
;; before package and UI initialization happens.
;;

;;; Code:

#+end_src


* vanilla emacs settings
  
** mostly related to initialization process

*** earlyinits

 This snippet ensures that users running versions of Emacs prior to
 27.0 can utilize custom configurations defined in early-init.el,
 thereby enhancing their Emacs experience without disrupting
 compatibility with newer versions.

#+begin_src emacs-lisp

  (when (version< emacs-version "27.0")
    (let ((dafile
	   (expand-file-name "early-init.el" user-emacs-directory)))
      (when (file-exists-p dafile)
	(load-file dafile))))

#+end_src

*** other init settings for speed

 Inhibit the default setting and kill scratch buffer to speedup
 initialization time and I don't like having an elisp interaction mode
 as the default scratch buffer.

#+begin_src emacs-lisp

  (customize-set-variable 'inhibit-default-init t)
  ;; (setq initial-major-mode 'fundamental-mode)
  (kill-buffer "*scratch*")

#+end_src

*** suppress some ad-handle-definition warnings

 Accept ad-redefinitions during advice redefintions. I want it to
 accept it to avoid warnings related to them. Original value was
 ‘warn’.

#+begin_src emacs-lisp

  (customize-set-variable 'ad-redefinition-action 'accept)

#+end_src

*** more garbage collection related settings

 Define functions to change gc-cons-threshold to the maximum fixnum so
 that garbage collection could be defered. This part delays garbage
 collection during minibuffer completions to until when you exit the
 minibuffer.

#+begin_src emacs-lisp

  (defvar yae-gc-cons-threshold (* 32 1024 1024))

  (defun yae-defer-garbage-collection-h ()
    (setq gc-cons-threshold most-positive-fixnum))

  (defun yae-restore-garbage-collection-h ()
    ;; Defer it so that commands launched immediately after will enjoy the
    ;; benefits.
    (run-at-time
     1 nil (lambda () (setq gc-cons-threshold (* 32 1024 1024)))))

  (add-hook 'minibuffer-setup-hook #'yae-defer-garbage-collection-h)
  (add-hook 'minibuffer-exit-hook #'yae-restore-garbage-collection-h)

#+end_src


** some constants and settings that need to be configured initially

*** COMMENT constants

 Dynamically generate version-specific constants for Emacs versions 24
 through 35 and defines constants to identify the operating system
 type. This allows for easy conditional checks based on both Emacs
 version and the underlying system, facilitating cross-platform
 compatibility in configurations.

#+begin_src emacs-lisp

  ;; define  variables by using a macro that generates and evaluates as below
  ;; (defconst EMACS24+   (> emacs-major-version 23)) using macros
  (defmacro yae-gen-ver-consts (var)
    "Define a macro to create constants to check Emacs version greater than VAR."
    (list 'defconst
	  (intern (concat "EMACS" (int-to-string var) "+"))
	  (> emacs-major-version (- var 1))))

  ;;evaluate the macro for the number range we want
  (seq-do (lambda (x) (eval (list 'yae-gen-ver-consts x))) (number-sequence 24 35))

  ;; (map #(eval (list 'yae-gen-ver-consts %)) (range 24 36))

  (defconst IS-MAC     (eq system-type 'darwin))
  (defconst IS-LINUX   (eq system-type 'gnu/linux))
  (defconst IS-WINDOWS (memq system-type '(cygwin windows-nt ms-dos)))
  (defconst IS-BSD     (or IS-MAC (eq system-type 'berkeley-unix)))

#+end_src

*** custom-file settings

 Direct Emacs to save custom settings in a specific file (custom.el),
 which helps in organizing user configurations and maintaining them
 separately from the main configuration file.

#+begin_src emacs-lisp

  (customize-set-variable
   'custom-file
   (expand-file-name "custom.el" user-emacs-directory))

  ;; (add-hook 'kill-emacs-query-functions
  ;;           'custom-prompt-customize-unsaved-options)

#+end_src

*** gnutls and security

#+begin_src emacs-lisp

  ;;; Security

  ;; Emacs is essentially one huge security vulnerability, what with all the
  ;; dependencies it pulls in from all corners of the globe. Let's try to be at
  ;; least a little more discerning.
  (with-no-warnings
  
    (setq gnutls-verify-error (not (getenv-internal "INSECURE"))
	  gnutls-algorithm-priority
	  (when (boundp 'libgnutls-version)
	    (concat "SECURE128:+SECURE192:-VERS-ALL"
		    (if (and (not IS-WINDOWS)
			     (not (version< emacs-version "26.3"))
			     (>= libgnutls-version 30605))
			":+VERS-TLS1.3")
		    ":+VERS-TLS1.2"))
	  ;; `gnutls-min-prime-bits' is set based on recommendations from
	  ;; https://www.keylength.com/en/4/
	  gnutls-min-prime-bits 3072
	  tls-checktrust gnutls-verify-error
	  ;; Emacs is built with `gnutls' by default, so `tls-program' would not be
	  ;; used in that case. Otherwise, people have reasons to not go with
	  ;; `gnutls', we use `openssl' instead. For more details, see
	  ;; https://redd.it/8sykl1
	  tls-program '("openssl s_client -connect %h:%p -CAfile %t -nbio -no_ssl3 -no_tls1 -no_tls1_1 -ign_eof"
			"gnutls-cli -p %p --dh-bits=3072 --ocsp --x509cafile=%t \
  --strict-tofu --priority='SECURE192:+SECURE128:-VERS-ALL:+VERS-TLS1.2:+VERS-TLS1.3' %h"
			;; compatibility fallbacks
			"gnutls-cli -p %p %h"))

    ;; Emacs stores `authinfo' in $HOME and in plain-text. Let's not do that, mkay?
    ;; This file stores usernames, passwords, and other such treasures for the
    ;; aspiring malicious third party.
    (setq auth-sources (list (expand-file-name "authinfo.gpg"  user-emacs-directory)
			     "~/.authinfo.gpg")))

  ;;gnutls
  (add-hook 'after-init-time-hook (setq gnutls-min-prime-bits 4096))

#+end_src

*** encryption related additional

 Select gpg2 for the gpg version to use and specify authinfo.gpg for
 credentials.

#+begin_src emacs-lisp

  ;; (customize-set-variable 'epg-gpg-program "gpg2")
  (customize-set-variable 'auth-sources '("~/.authinfo.gpg"))

#+end_src

*** lexical binding

 Lexical binding is a feature in Emacs Lisp (Elisp) that allows
 variables to be bound within the scope where they are defined, rather
 than dynamically through the call stack. This mechanism significantly
 influences how variables behave and are accessed in Elisp, leading to
 more predictable and intuitive programming.

#+begin_src emacs-lisp

  (setq-default lexical-binding t)

#+end_src




** window(frame) look and feel setting
*** minor modes menu much like minions

#+begin_src emacs-lisp

  (defun rtfm-emacs-minions--modes ()
    (let (local global)
      (dolist (entry minor-mode-alist)
	(let ((mode (car entry)))
	  (when (and (boundp mode)
		     (symbol-value mode))
	    (when (local-variable-if-set-p mode)
	      (push mode local)
	      (push mode global)))))
      (list (sort local  #'string<)
	    (sort global #'string<))))

  (defun rtfm-emacs-minions-minor-modes-menu ()
    (interactive)
    (let ((map (make-sparse-keymap))
	  local global)
      (let ((modes (rtfm-emacs-minions--modes)))
	(setq local (nth 0 modes))
	(setq global (nth 1 modes)))
      (define-key-after map [--local] (list 'menu-item "Local Modes"))
      (dolist (mode local)
	(let ((menu (and (symbol-value mode)
			 (rtfm-emacs-minions--mode-menu mode))))
	  (if menu
	      (define-key-after map (vector mode) menu)
	    (rtfm-emacs-minions--define-toggle map mode))))
      (define-key-after map [--line2]  (list 'menu-item "--double-line"))
      (define-key-after map [--global] (list 'menu-item "Global Modes"))
      (dolist (mode global)
	(let ((menu (and (symbol-value mode)
			 (rtfm-emacs-minions--mode-menu mode))))
	  (if menu
	      (define-key-after map (vector mode) menu)
	    (rtfm-emacs-minions--define-toggle map mode))))
      (define-key-after map [--line1] (list 'menu-item "--double-line"))
      (define-key-after map [describe-mode]
	(list 'menu-item "Describe modes" 'describe-mode))
      (condition-case nil
	  (popup-menu map)
	(quit nil))))

  (defun rtfm-emacs-minions--mode-menu (mode)
    (let* ((map  (or (cdr (assq mode minor-mode-map-alist))
		     (cdr (assq mode minor-mode-overriding-map-alist))))
	   (menu (and (keymapp map)
		      (lookup-key map [menu-bar])))
	   (menu (and menu
		      (mouse-menu-non-singleton menu))))
      (and menu
	   (let ((wrap (make-sparse-keymap)))
	     (set-keymap-parent wrap menu)
	     (rtfm-emacs-minions--define-toggle wrap mode)
	     (define-key-after wrap [rtfm-emacs-minions] (list 'menu-item "--double-line"))
	     (list 'menu-item (symbol-name mode) wrap)))))

  (defun rtfm-emacs-minions--define-toggle (map mode)
    (let ((fn (or (get mode :minor-mode-function) mode)))
      (when (functionp fn)
	(define-key-after map (vector mode)
	  (list 'menu-item (symbol-name mode) fn
		:button (cons :toggle mode))))))

#+end_src

*** modify mode-line

#+begin_src emacs-lisp

  (defun mode-line-split--format (left right)
    "Return a string of `window-width' length containing LEFT and
  RIGHT, aligned respectively."
    (let ((reserve (length right)))
      (concat left
	      " "
	      (propertize " "
			  'display `((space :align-to (- right (- 0 right-margin) ,reserve))))
	      right)))

  ;; Set the new mode-line-format
  (if (display-graphic-p)
      (setq-default mode-line-format
		    '((:eval
		       (mode-line-split--format
			;; Left
			(format-mode-line
			 '("%e" mode-line-front-space
			   (:propertize
			    ("" mode-line-mule-info mode-line-client mode-line-modified mode-line-remote)
			    display
			    (min-width
			     (5.0)))
			   mode-line-frame-identification mode-line-buffer-identification "   " mode-line-position))
			;; Right
			(format-mode-line
			 '((vc-mode vc-mode)
			   "   "
			   mode-name " ";; "%m"
			   (:eval (propertize "[+]" 'local-map (make-mode-line-mouse-map 'mouse-1 'rtfm-emacs-minions-minor-modes-menu)))
			   "   "
			   (:eval (propertize "[≡]" 'local-map (make-mode-line-mouse-map 'mouse-1 'menu-bar-open)))
			   " "
			   "  " mode-line-misc-info mode-line-end-spaces
			   )
			 )))))
    (setq-default mode-line-format
		  '((:eval
		     (mode-line-split--format
		      ;; Left
		      (format-mode-line
		       '("%e" mode-line-front-space
			 (:propertize
			  ("" mode-line-mule-info mode-line-client mode-line-modified mode-line-remote)
			  display
			  (min-width
			   (5.0)))
			 mode-line-frame-identification mode-line-buffer-identification "   " mode-line-position))
		      ;; Right
		      (format-mode-line
		       '((vc-mode vc-mode)
			 "   "
			 mode-name " ";; "%m"
			 "  " mode-line-misc-info mode-line-end-spaces
			 )
		       ))))))

#+end_src

*** headerline

#+begin_src emacs-lisp

  (setq-default header-line-format '(:eval (substring ""
						      (min (length " ")
							   (window-hscroll)))))
#+end_src

*** disable dialogues

#+begin_src emacs-lisp

  (setq use-dialog-box nil)
  (setq use-file-dialog nil)

#+end_src

*** cursor type
#+begin_src emacs-lisp

  (setq-default cursor-type '(bar . 5))  ;; 'bar or 'box, 'hbar, etc.

#+end_src




** require some libraries

 Require some libraries like cl-lib and color because they are
 necessary for the rest of the config.

#+begin_src emacs-lisp

  (if EMACS26+ (require 'cl-lib)
    (require 'cl))

  (require 'color)

#+end_src

** set load path

#+begin_src emacs-lisp

  (defun add-subdirs-to-load-path (dir)
    "Add all directories under DIR to `load-path` if not already present."
    (dolist (subdir (directory-files dir t "^[^.]"))  ; Iterate over non-hidden files
      (when (file-directory-p subdir)                 ; Check if it's a directory
	(unless (member subdir load-path)              ; If not already in load-path
	  (add-to-list 'load-path subdir))             ; Add it to load-path
	(add-subdirs-to-load-path subdir))))            ; Recursively call for subdirectories

  ;; Example usage: Add all subdirectories of the site-lisp directory to load-path
  (let ((lisp-dir (expand-file-name "site-lisp" user-emacs-directory)))
    (unless (file-directory-p lisp-dir)
      (make-directory lisp-dir))  ; Ensure the site-lisp directory exists
    (unless (member lisp-dir load-path)
      (add-to-list 'load-path lisp-dir))  ; Add the site-lisp directory to load-path
    (add-subdirs-to-load-path lisp-dir))  ; Add all subdirectories recursively

#+end_src


* load-theme

#+begin_src emacs-lisp

  (defconst theme-directory (expand-file-name "themes" user-emacs-directory))

  (unless (file-directory-p theme-directory)
    (make-directory theme-directory))

  (add-to-list 'custom-theme-load-path
	       (expand-file-name "themes" user-emacs-directory))


  (let ((basedir theme-directory))
    (dolist (f (directory-files basedir))
      (if (and (not (or (equal f ".") (equal f "..")))
	       (file-directory-p (concat basedir f)))
	  (add-to-list 'custom-theme-load-path (concat basedir f)))))


  (add-hook 'after-init-time-hook
	    (progn
	      (load-theme 'rtfm-noone-dark t)))

#+end_src


* load custom faces

#+begin_src emacs-lisp

  (add-hook 'after-init-hook
	    (lambda ()
	      (let ((dafile (expand-file-name "custom_faces.el" user-emacs-directory)))
		(when (file-exists-p dafile) (load-file dafile)))))

  (when EMACS27+
    (add-hook 'server-after-make-frame-hook
	      (lambda ()
		(let ((dafile (expand-file-name "custom_faces.el" user-emacs-directory)))
		  (when (file-exists-p dafile) (load-file dafile))))))

#+end_src
  

* ending
#+begin_src emacs-lisp
  ;;; rtfm.el ends here
#+end_src

